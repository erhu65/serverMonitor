{
  "name": "heapdump",
  "main": "./build/Release/heapdump",
  "version": "0.1.0",
  "description": "Make a dump of the V8 heap for later inspection.",
  "homepage": "https://github.com/bnoordhuis/node-heapdump",
  "author": {
    "name": "Ben Noordhuis",
    "email": "info@bnoordhuis.nl",
    "url": "http://bnoordhuis.nl/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bnoordhuis/node-heapdump.git"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "node-heapdump\n===\n\nMake a dump of the V8 heap for later inspection.\n\n### Install\n\n    npm install heapdump\n\n### Build\n\n    node-gyp configure build\n\n### Usage\n\nLoad the add-on in your application:\n\n    var heapdump = require('heapdump');\n\nThe module exports a single, no-arg function called `writeSnapshot()` that\nwrites a `heapdump-xxxx.xxxx.heapsnapshot` file to the application's current\ndirectory.\n\n    heapdump.writeSnapshot();\n\nOn UNIX, it forks off a new process that writes out the snapshot in an\nasynchronous fashion.  (That is, the function does not block.)\n\nOn Windows, however, it returns only after the snapshot is fully written.\nIf the heap is large, that may take a while.\n\nOn UNIX platforms, you can force a snapshot by sending the node.js process\na SIGUSR2 signal:\n\n    $ kill -USR2 <pid>\n\n### Inspecting the snapshot\n\nOpen [Google Chrome](https://www.google.com/intl/en/chrome/browser/) and\npress F12 to open the developer toolbar.\n\nGo to the `Profiles` tab, right-click in the tab pane and select\n`Load profile...`.\n\nSelect the dump file and click `Open`.  You can now inspect the heap snapshot\nat your leisure.\n",
  "readmeFilename": "README.md",
  "_id": "heapdump@0.1.0",
  "dist": {
    "shasum": "603c11bb3aa40a253a7133f6b3b9084bc8518c1d"
  },
  "_from": "heapdump@",
  "_resolved": "https://registry.npmjs.org/heapdump/-/heapdump-0.1.0.tgz"
}
