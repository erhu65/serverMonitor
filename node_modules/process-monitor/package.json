{
  "name": "process-monitor",
  "description": "Monitors the CPU and memory usage for a PID or collection of PIDs.",
  "version": "0.3.0",
  "homepage": "https://github.com/onmodulus/process-monitor",
  "author": {
    "name": "Modulus",
    "email": "support@modulus.io"
  },
  "contributors": [
    {
      "name": "Brandon Cannaday",
      "email": "brandon@modulus.io"
    },
    {
      "name": "Matt Hernandez",
      "email": "matt@eventargs.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/onmodulus/process-monitor.git"
  },
  "bugs": {
    "url": "https://github.com/onmodulus/process-monitor/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/onmodulus/process-monitor/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/process-monitor",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "grunt travis --verbose"
  },
  "dependencies": {
    "string": "0.2.x",
    "stringformat": "0.0.5",
    "usage": "0.3.x"
  },
  "devDependencies": {
    "grunt": "~0.3.15",
    "docco-husky": "~0.3.3"
  },
  "keywords": [
    "process",
    "monitor",
    "pid",
    "ps"
  ],
  "docco_husky": {
    "output_dir": "docs",
    "project_name": "Process-Monitor",
    "show_timestamp": false
  },
  "readme": "# process-monitor\n\n[![Build Status](https://secure.travis-ci.org/fiveisprime/process-monitor.png)](http://travis-ci.org/fiveisprime/process-monitor)\n\nMonitors the CPU and memory usage for a PID or collection of PIDs asynchronously and emits an event with a stats object which includes information about the specified PID. Allows a user-specified format string for creating a friendly status message.\n\n## Getting Started\n\nInstall the module:\n\n    npm install process-monitor\n\nUse it in your script:\n\n    var procmon = require('process-monitor');\n\nMonitor a single PID or multiple PIDs:\n\n    // Single PID\n    var single = procmon.monitor({ pid: 1, interval: 5000 }).start();\n\n    // Multiple PIDs\n    var multi = procmon.monitor({ pid: [1, 2, 3] }).start();\n\nHandle the `stats` response - an event will be emitted for each of the specified PIDs and includes the PID:\n\n    single.on('stats', function(stats) {\n      console.dir(stats); // Outputs: { pid: 1, cpu: '0.0', mem: '2248', out: '' }\n    })\n\n_Note: if a PID is not found, the resulting cpu and mem properties will be 0.0 and 0 respectively._\n\n## Documentation\nGenerated code documentation is available [here](http://eventargs.com/docs/process-monitor/) and in the docs directory. This documentation is generated using\n`docco-husky` - to regenerate the documentation, run `$ docco-husky lib/*`.\n\nCurrently the `monitor` function accepts the following configuration options:\n\n### pid\n\nThe `pid` option may be a single process ID or an array from process IDs to monitor. The PID is also included in the `stats` object on when the `stats` event is emitted.\n\n    procmon.monitor({ pid: 1}).start();\n    procmon.monitor({ pid: [1, 2, 3] }).start();\n\n### interval\n\nThe rate in milliseconds at which the processes are checked and the stats event is emitted. The rate defaults to 1000 miliseconds.\n\n    procmon.monitor({ pid: 1, interval: 5000 }).start();\n\n### format\n\nSpecify a format string that will be updated in the `stats` object on update. Use `{pid}`, `{cpu}`, and `{mem}` to output a friendly message on update.\n\n    procmon.monitor({\n      pid: [1, 2],\n      interval: 5000,\n      format: 'PID {pid} - {cpu}% CPU - {mem} memory'\n    }).start();\n\n    procmon.on('stats', function(stats) {\n      console.log(stats.out);\n    });\n\n### technique\nThere are two supported techniques for reading process information.\n\n    procmon.monitor({\n      pid: 1,\n      interval: 5000,\n      technique: 'ps'\n    }).start();\n\n* `ps` (default): Uses the `ps` command to find CPU and memory usage. CPU value returned from the `ps` command is a lifetime average and does not reflect the current usage.\n* `proc`: Uses information stored in the /proc files to calculate current CPU usage. Implementation comes from the [node-usage](https://npmjs.org/package/usage) module. Only supported on Linux.\n\n## Release History\n* 2013/04/23 - v0.3.0 - Added support for current CPU usage. Uses [node-usage](https://npmjs.org/package/usage) module.\n* 2012/09/28 - v0.2.0 - Added `format` to the configuration object which accepts a format for the output (the `out` property of the `stats` object). Uses [stringformat](https://npmjs.org/package/stringformat) which allows the use of `{cpu}`, `{mem}`, and `{pid}` in the format string.\n* 2012/09/24 - v0.1.1 - Documentation update for publishing to npm.\n* 2012/09/14 - v0.1.0 - Initial release.\n\n## License\nCopyright (c) 2012 Modulus\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "process-monitor@0.3.0",
  "dist": {
    "shasum": "36ee41d0b5cdb8baac7b734108e07a602402fdbd"
  },
  "_from": "process-monitor@",
  "_resolved": "https://registry.npmjs.org/process-monitor/-/process-monitor-0.3.0.tgz"
}
