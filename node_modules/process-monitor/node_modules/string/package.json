{
  "name": "string",
  "version": "0.2.2",
  "description": "string contains methods that aren't included in the vanilla JavaScript string.",
  "homepage": [
    "http://stringjs.com"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/jprichardson/string.js"
  },
  "keywords": [
    "string",
    "strings",
    "string.js",
    "stringjs",
    "S",
    "s"
  ],
  "author": {
    "name": "JP Richardson",
    "email": "jprichardson@gmail.com"
  },
  "licenses": [
    {
      "type": "MIT,Apache v2,LGPL"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "1.3.x",
    "mocha": "*",
    "uglify-js": "1.2.x",
    "growl": "1.5.x"
  },
  "main": "lib/string.js",
  "readme": "[string.js](http://stringjs.com)\n=========\n\n`string.js`, or simply `S` is a lightweight (< 2k Gzipped) JavaScript library for the browser or for Node.js that provides extra String methods. Originally, it modified the String prototype. But I quickly learned that in JavaScript, this is considered poor practice.\n\n\n\nMotivation\n----------\n\nPersonally, I prefer the cleanliness of the way code looks when it appears to be native methods. i.e. when you modify native Javascript prototypes. However, if any app dependency required `string.js`, then the app's string prototype in every module would be modified as well. This could be troublesome. So I settled on creating a wrapper a la jQuery style. For those of you prototype hatin' fools, such as myself, there is the method `clobberPrototype()`.\n\nHere's a list of alternative frameworks:\n\n* [Prototype Framework's String library](http://prototypejs.org/api/string)\n* [Uize.String](http://www.uize.com/reference/Uize.String.html)\n* [Google Closure's String](http://closure-library.googlecode.com/svn/docs/namespace_goog_string.html)\n* [Underscore.string](http://epeli.github.com/underscore.string/)\n* [Sugar.js](http://sugarjs.com)\n* [php.js](http://phpjs.org/pages/home)\n\nWhy wasn't I happy with any of them? They are all static methods that don't seem to support chaining in a clean way 'OR' they have an odd dependency. Sugar is the notable exception.\n\n\n\nInstallation\n------------\n\n  npm install --production string\n\n\n\n\nUsage \n-----\n\n### Node.js\n\n```javascript\nvar S = require('string');\n```\n\nOriginally, I was using `$s` but glancing over the code, it was easy to confuse `$s` for string.js with `$` for jQuery. Feel free to use the most convenient variable for you.\n\n### Browsers\n\n```html\n<!-- HTML5 -->\n<script src=\"https://raw.github.com/jprichardson/string.js/master/lib/string.min.js\"></script>\n\n<!-- Note that in the mime type for Javascript is now officially 'application/javascript'. If you\nset the type to application/javascript in IE browsers, your Javscript will fail. Just don't set a \ntype via the script tag and set the mime type from your server. Most browsers look at the server mime\ntype anyway -->\n\n<!-- For HTML4/IE -->\n<script type=\"text/javascript\" src=\"https://raw.github.com/jprichardson/lib/string.js/master/string.min.js\"></script>\n```\n\nA global variable `window.S` or simply `S` is created.\n\n### Both\n\n```javascript\nvar doesIt = S('my cool string').left(2).endsWith('y'); //true\n```\n\nAccess the wrapped string using `s` variable or `toString()`\n\n```javascript\nvar name = S('Your name is JP').right(2).s; //'JP'\n```\n\nis the same asâ€¦\n\n```javascript\nvar name = S('Your name is JP').right(2).toString(); //'JP'\n```\n\nStill like the clean look of calling these methods directly on native Strings? No problem. Call `clobberPrototype()`. Make sure to not call this at the module level, at it'll effect the entire application lifecycle. You should really only use this at the method level. The one exception being if your application will not be a dependency of another application.\n\n```javascript\nS.clobberPrototype();\nvar name = 'Your name is JP'.right(2); //'JP'\nS.restorePrototype(); //be a good citizen and clean up\n```\n\n\nMethods\n-------\n\nSee [test file][1] for more details. \n\nI use the same nomenclature as Objective-C regarding methods. **+** means `static` or `class` method. **-** means `non-static` or `instance` method. \n\n\n### - camelize()\n\nRemove any underscores or dashes and convert a string into camel casing.\n\nExample:\n\n```javascript\nS('data_rate').camelize().s; //'dataRate'\nS('background-color').camelize().s; //'backgroundColor'\nS('-moz-something').camelize().s; //'mozSomething'\nS('_car_speed_').camelize().s; //'carSpeed'\nS('yes_we_can').camelize().s; //'yesWeCan'\n```\n\n\n### - capitalize() ###\n\nCapitalizes the first character of a string.\n\nExample:\n\n```javascript\nS('jon').capitalize().s; //'Jon'\nS('JP').capitalize().s; //'Jp'\n```\n\n\n### + clobberPrototype() ###\n\nModifies `String.prototype` to have all of the methods found in string.js.\n\nExample:\n\n```javascript\nS.clobberPrototype();\n```\n\n\n### - collapseWhitespace() ###\n\nConverts all adjacent whitespace characters to a single space.\n\nExample:\n\n```javascript\nvar str = S('  String   \\t libraries are   \\n\\n\\t fun\\n!  ').collapseWhitespace().s; //'String libraries are fun !'\n```\n\n\n### - contains(ss) ###\n\nReturns true if the string contains `ss`.\n\nAlias: `include()`\n\nExample:\n\n```javascript\nS('JavaScript is one of the best languages!').contains('one'); //true\n```\n\n\n### - dasherize() ###\n\nReturns a converted camel cased string into a string delimited by dashes.\n\nExamples:\n\n```javascript\nS('dataRate').dasherize().s; //'data-rate'\nS('CarSpeed').dasherize().s; //'-car-speed'\nS('yesWeCan').dasherize().s; //'yes-we-can'\nS('backgroundColor').dasherize().s; //'background-color'\n```\n\n\n### - decodeHtmlEntities() ###\n\nDecodes HTML entities into their string representation.\n\n```javascript\nS('Ken Thompson &amp; Dennis Ritchie').decodeHtmlEntities().s; //'Ken Thompson & Dennis Ritchie'\nS('3 &lt; 4').decodeHtmlEntities().s; //'3 < 4'\n```\n\n\n### - endsWith(ss) ###\n\nReturns true if the string ends with `ss`.\n\nExample:\n\n```javascript\nS(\"hello jon\").endsWith('jon'); //true\n```\n\n\n### - include(ss) ###\n\nReturns true if the string contains the `ss`.\n\nAlias: `contains()`\n\nExample:\n\n```javascript\nS('JavaScript is one of the best languages!').include('one'); //true\n```\n\n\n### - isAlpha() ###\n\nReturn true if the string contains only letters.\n\nExample:\n\n```javascript\nS(\"afaf\").isAlpha(); //true\nS('fdafaf3').isAlpha(); //false\nS('dfdf--dfd').isAlpha(); //false\n```\n\n\n### - isAlphaNumeric() ###\n\nReturn true if the string contains only letters and numbers\n\nExample:\n\n```javascript\nS(\"afaf35353afaf\").isAlphaNumeric(); //true\nS(\"FFFF99fff\").isAlphaNumeric(); //true\nS(\"99\").isAlphaNumeric(); //true\nS(\"afff\").isAlphaNumeric(); //true\nS(\"Infinity\").isAlphaNumeric(); //true\nS(\"-Infinity\").isAlphaNumeric(); //false\nS(\"-33\").isAlphaNumeric(); //false\nS(\"aaff..\").isAlphaNumeric(); //false\n```\n\n\n### - isEmpty() ###\n\nReturn true if the string is solely composed of whitespace\n\nExample:\n\n```javascript\nS(' ').isEmpty(); //true\nS('\\t\\t\\t    ').isEmpty(); //true\nS('\\n\\n ').isEmpty(); //true\n```\n\n\n### - isLower() ###\n\nReturn true if the character or string is lowercase\n\nExample:\n\n```javascript      \nS('a').isLower(); //true\nS('z').isLower(); //true\nS('B').isLower(); //false\nS('hijp').isLower(); //true\nS('hi jp').isLower(); //false\nS('HelLO').isLower(); //false\n```\n\n\n### - isNumeric() ###\n\nReturn true if the string only contains digits\n\nExample:\n\n```javascript\nS(\"3\").isNumeric(); //true\nS(\"34.22\").isNumeric(); //false\nS(\"-22.33\").isNumeric(); //false\nS(\"NaN\").isNumeric(); //false\nS(\"Infinity\").isNumeric(); //false\nS(\"-Infinity\").isNumeric(); //false\nS(\"JP\").isNumeric(); //false\nS(\"-5\").isNumeric(); //false\nS(\"000992424242\").isNumeric(); //true\n```\n\n\n### - isUpper() ###\n\nReturns true if the character or string is uppercase\n\nExample:\n\n```javascript\nS('a').isUpper() //false\nS('z').isUpper()  //false\nS('B').isUpper() //true\nS('HIJP').isUpper() //true\nS('HI JP').isUpper() //false\nS('HelLO').isUpper() //true\n```\n\n\n### - ltrim() ###\n\nReturn the string with leading and whitespace removed\n\nExample:\n\n```javascript\nS('  How are you?').ltrim().s; //'How are you?'; \n```\n\n\n### - left(n) ###\n\nReturn the substring denoted by `n` positive left-most characters.\n\nExample:\n\n```javascript\nS('My name is JP').left(2).s; //'My'\nS('Hi').left(0).s; //''\nS('My name is JP').left(-2).s; //'JP', same as right(2)\n```\n\n\n### - repeat(n) ###\n\nReturns a string repeated `n` times.\n\nAlias: `times()`\n\nExample:\n\n```javascript\nS(' ').repeat(5).s; //'     '\nS('*').repeat(3).s; //'***'\n```\n\n\n### - replaceAll(ss, newstr) ###\n\nReturn the new string with all occurrences of `ss` replaced with `newstr`.\n\nExample:\n\n```javascript\nS(' does IT work? ').replaceAll(' ', '_').s; //'_does_IT_work?_'\nS('Yes it does!').replaceAll(' ', '').s; //'Yesitdoes!'\n```\n\n\n### + restorePrototype() ###\n\nRestore the original String prototype. Typically used in conjunction with `clobberPrototype()`.\n\nExample:\n\n```javascript\nS.restorePrototype();\n```\n\n\n### - right(n) ###\n\nReturn the substring denoted by `n` positive right-most characters.\n\nExample:\n\n```javascript\nS('I AM CRAZY').right(2).s; //'ZY'\nS('Does it work?  ').right(4).s; //'k?  '\nS('Hi').right(0).s; //''\nS('My name is JP').right(-2).s; //'My', same as left(2)\n```\n\n\n### - rtrim() ###\n\nReturn the string with trailing whitespace removed.\n\nExample:\n\n```javascript\nS('How are you?   ').rtrim().s; //'How are you?'; \n```\n\n\n### - s ###\n\nAlias: `toString()`\n\nThe encapsulated native string representation of an `S` object. \n\nExample:\n\n```javascript\nS('my name is JP.').capitalize().s; //My name is JP.\nvar a = \"Hello \" + S('joe!'); //a = \"Hello joe!\"\nS(\"Hello\").toString() === S(\"Hello\").s; //true\n```\n\n\n### - startsWith(prefix)   ###\n\nReturn true if the string starts with `prefix`.\n\nExample:\n\n```javascript\nS(\"JP is a software engineer\").startsWith(\"JP\"); //true\nS('wants to change the world').startsWith(\"politicians\"); //false\n```\n\n\n### - times(n) ###\n\nReturns a string repeated `n` times.\n\nAlias: `repeat()`\n\nExample:\n\n```javascript\nS(' ').times(5).s //'     '\nS('*').times(3).s //'***'\n```\n\n\n### - trim() ###\n\nReturn the string with leading and trailing whitespace removed. Reverts to native `trim()` if it exists.\n\nExample:\n\n```javascript\nS('hello ').trim().s; //'hello'\nS(' hello ').trim().s; //'hello'\nS('\\nhello').trim().s; //'hello'\nS('\\nhello\\r\\n').trim().s; //'hello'\nS('\\thello\\t').trim().s; //'hello'\n```\n\n\n### - toString() ###\n\nAlias: `s`\n\nReturn the string representation of an `S` object. Not really necessary to use. However, JS engines will look at an object and display its `toString()` result.\n\nExample:\n\n```javascript\nS('my name is JP.').capitalize().toString(); //My name is JP.\nvar a = \"Hello \" + S('joe!'); //a = \"Hello joe!\"\nS(\"Hello\").toString() === S(\"Hello\").s; //true\n```\n\n\n### - underscore()\n\nReturns converted camel cased string into a string delimited by underscores.\n\nExample:\n\n```javascript\nS('dataRate').underscore().s; //'data_rate'\nS('CarSpeed').underscore().s; //'_car_speed'\nS('yesWeCan').underscore().s; //'yes_we_can'\n```\n\n\n\nI will definitely add more methods, I'll be adding them on as-needed basis.\n\n\n\nQuirks\n------\n\n`decodeHtmlEntities()` converts `&nbsp;` to **0x0a** (160) and not **0x20** (20). Most browsers consider 0xa to be whitespace characters, Internet Explorer does not despite it being part of the ECMA standard. Google Closure does a good job of normalizing this behavior. This may need to fixed in `string.js` at some point in time.\n\n\n\nTesting\n-------\n\n### Node.js\n\nInstall the dev dependencies:\n\n    $ npm install string\n\nThen navigate to the installed directory:\n\n    $ cd node_modules/string/\n\nRun test package:\n\n    $ cake test\n\n\n\n### Browser ###\n\n[Click Here](http://stringjs.com/browser.test.html)\n\n\n\nCredits\n-------\n\nI have looked at the code by the creators in the libraries mentioned in **Motivation**. As noted in the source code, I've specifically used code from Google Closure (Google Inc), Underscore String [Esa-Matti Suuronen](http://esa-matti.suuronen.org/), and php.js (http://phpjs.org/authors/index).  \n\n\n\nLicense\n-------\n\nTriple licensed under MIT/X11, Apache v2, and LGPL. If you use this, pick which one works for you and your software. Attribution is always nice.\n\n\nCopyright (c) 2012 JP Richardson\n\n[1]: https://github.com/jprichardson/string.js/blob/master/test/string.test.coffee\n\n\n",
  "readmeFilename": "README.md",
  "_id": "string@0.2.2",
  "dist": {
    "shasum": "f12a6fa4f9a5ef623729a068ed19c6e96ffcca8a"
  },
  "_from": "string@0.2.x",
  "_resolved": "https://registry.npmjs.org/string/-/string-0.2.2.tgz"
}
